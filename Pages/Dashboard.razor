@page "/Dashboard"
@attribute [Authorize(Roles = "Administrators, Supervisor")]
@using ChartJs.Blazor.BarChart
@using ChartJs.Blazor
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Common.Enums
@using ChartJs.Blazor.Util
@using WebDoAn.Interfaces
@using WebDoAn.Models
@using WebDoAn.Services
@using WebDoAn.Data
@inject IWaterService _waterService
@inject TelemetryService TelemetryService
<section>
    <!-- sidebar menu start -->
    <div class="sidebar-menu sticky-sidebar-menu">


        <div class="logo">
            <h3><a href="index.razor">Phần Mềm Quản Lý Chất Lượng Nước</a></h3>
        </div>
    </div>

    <div class="main-content">
        <div class="container-fluid content-top-gap">

            <nav aria-label="breadcrumb">
                <ol class="breadcrumb my-breadcrumb">
                    <li class="breadcrumb-item"><a href="index.html">Trang Chủ</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Dashboard</li>
                </ol>
            </nav>
            <div class="welcome-msg pt-3 pb-4">
                <h4>Hi <span class="text-primary">Nhân Viên A</span>, Chào Mừng Bạn Quay Lại</h4>
                <p>Các chỉ số nguồn nước bạn cần theo dõi.</p>
            </div>

            <!-- statistics data -->
            <div class="statistics">
                <div class="row">
                    <div class="col-xl-6 pr-xl-2">
                        <div class="row">
                            <div class="col-sm-6 pr-sm-2 statistics-grid">
                                <div class="card card_border border-primary-top p-4">
                                    <i class="lnr lnr-drop"> </i>
                                    <h3 class="text-primary number">@currentWater.Turbidity NTU</h3>
                                    <p class="stat-text">Chỉ số độ đục</p>
                                </div>
                            </div>
                            <div class="col-sm-6 pl-sm-2 statistics-grid">
                                <div class="card card_border border-primary-top p-4">
                                    @if (double.Parse(currentWater.PH) >= 8.0 || double.Parse(currentWater.PH) < 4.0)
                                    {
                                        <i style="color:red" class="lnr lnr-warning"> </i>

                                    }
                                    <h3 class="text-secondary number">pH = @currentWater.PH </h3>
                                    <p class="stat-text">Chỉ số pH</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-xl-6 pl-xl-2">
                        <div class="row">
                            <div class="col-sm-6 pr-sm-2 statistics-grid">
                                <div class="card card_border border-primary-top p-4">
                                    <i class="lnr lnr-sun"> </i>
                                    <h3 class="text-success number">@currentWater.Temperature°C</h3>
                                    <p class="stat-text">Chỉ số nhiệt độ</p>
                                </div>
                            </div>
                            <div class="col-sm-6 pl-sm-2 statistics-grid">
                                <div class="card card_border border-primary-top p-4">
                                    <i class="lnr lnr-chart-bars"> </i>
                                    <h3 class="text-danger number">@currentWater.Waterflow m3/s</h3>
                                    <p class="stat-text">Chỉ số lưu lượng</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- charts -->
            <div class="chart">
                <div class="row">
                    <div class="col-lg-12 pr-lg-2 chart-grid">
                        <div class="card text-center card_border">
                            <div class="card-body">
                                <!-- bar chart -->
                                <div id="container">
                                    @*<canvas id="barchart"></canvas>*@
                                    <Chart Config="_config" @ref="_chart"></Chart>
                                </div>
                                <!-- //bar chart -->
                            </div>
                        </div>
                    </div>

                </div>
            </div>
            <!-- //charts -->


        </div>
        <!-- //content -->
    </div>
    <!-- main content end-->
</section>

@code{
    IList<WaterData> waters;
    private BarConfig _config;
    private Chart _chart;
    BarDataset<double> waterFlowDataset;
    BarDataset<double> pHDataSet;
    BarDataset<double> temDataSet;
    WaterData currentWater;
    private string temp;
    private string turb;
    private string ph;
    private string flow;

    private void OnInputTelemetryReceived(object sender, TelemetryDataPoint telemetryDataPoint)
    {
        /*message = $"Temperature: {telemetryDataPoint.temperature} - Humidity: {telemetryDataPoint.humidity}"*/
        ;
        temp = $"{telemetryDataPoint.Temperature}";
        turb = $"{telemetryDataPoint.Turbidity}";
        ph = $"{telemetryDataPoint.PH}";
        flow = $"{telemetryDataPoint.Waterflow}";
        InvokeAsync(() => StateHasChanged());
    }
    protected override void OnInitialized()
    {
        base.OnInitialized();

        TelemetryService.InputMessageReceived += OnInputTelemetryReceived;
        // Subscription to table record change events
        this._waterService.OnWaterChanged += this.WaterChanged;
        this.waters = this._waterService.GetCurrentWater();
        waters = waters.OrderBy(c => c.Time).ToList();
        currentWater = waters.LastOrDefault();

        _config = new BarConfig
        {
            Options = new BarOptions
            {
                Responsive = true,
                Legend = new Legend
                {
                    Position = Position.Top
                },
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Biểu đồ lượng nước"
                }
            }
        };

        foreach (var water in waters)
        {
            _config.Data.Labels.Add(water.Time.ToString());
        }
        waterFlowDataset = new BarDataset<double>(waters.Select(x => double.Parse(x.Waterflow)).ToArray())
        {
            Label = "Lưu lượng",
            BackgroundColor = ColorUtil.ColorHexString(255, 177, 193),
            BorderColor = ColorUtil.ColorHexString(255, 177, 193),
            BorderWidth = 1
        };
        pHDataSet = new BarDataset<double>(waters.Select(x => double.Parse(x.PH)).ToArray())
        {
            Label = "pH",
            BackgroundColor = ColorUtil.ColorHexString(154, 208, 245),
            BorderColor = ColorUtil.ColorHexString(154, 208, 245),
            BorderWidth = 1
        };
        temDataSet = new BarDataset<double>(waters.Select(x => double.Parse(x.Temperature)).ToArray())
        {
            Label = "Nhiệt độ",
            BackgroundColor = ColorUtil.ColorHexString(255, 230, 170),
            BorderColor = ColorUtil.ColorHexString(255, 230, 170),
            BorderWidth = 1
        };

        _config.Data.Datasets.Add(waterFlowDataset);
        _config.Data.Datasets.Add(pHDataSet);
        _config.Data.Datasets.Add(temDataSet);
    }

    private void LoadChart()
    {
        _config.Data.Labels.Clear();
        ((IDataset<double>)_config.Data.Datasets[0]).Clear();
        ((IDataset<double>)_config.Data.Datasets[1]).Clear();
        ((IDataset<double>)_config.Data.Datasets[2]).Clear();
        foreach (var water in waters)
        {
            _config.Data.Labels.Add(water.Time.ToString());
            ((IDataset<double>)_config.Data.Datasets[0]).Add(double.Parse(water.Waterflow));
            ((IDataset<double>)_config.Data.Datasets[1]).Add(double.Parse(water.PH));
            ((IDataset<double>)_config.Data.Datasets[2]).Add(double.Parse(water.Temperature));
        }
        _chart.Update();
    }

    private async void WaterChanged(object sender, WaterChangeEventArgs args)
    {
        var recordToupdate = this.waters.FirstOrDefault(x => x.ID == args.NewWater.ID);

        if (recordToupdate == null)
        {
            this.waters.Add(args.NewWater);
            currentWater = args.NewWater;
        }
        else
        {
            recordToupdate.Waterflow = args.NewWater.Waterflow;
            recordToupdate.Temperature = args.NewWater.Temperature;
            recordToupdate.PH = args.NewWater.PH;
            recordToupdate.Turbidity = args.NewWater.Turbidity;

        }
        LoadChart();
        await InvokeAsync(() =>
        {
            base.StateHasChanged();
        });
    }

    public void Dispose()
    {
        this._waterService.OnWaterChanged -= this.WaterChanged;
    }
}

